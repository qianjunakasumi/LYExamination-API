// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LYExaminationClient is the client API for LYExamination service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LYExaminationClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error)
}

type lYExaminationClient struct {
	cc grpc.ClientConnInterface
}

func NewLYExaminationClient(cc grpc.ClientConnInterface) LYExaminationClient {
	return &lYExaminationClient{cc}
}

func (c *lYExaminationClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginRsp, error) {
	out := new(LoginRsp)
	err := c.cc.Invoke(ctx, "/LYExamination/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LYExaminationServer is the server API for LYExamination service.
// All implementations must embed UnimplementedLYExaminationServer
// for forward compatibility
type LYExaminationServer interface {
	Login(context.Context, *LoginReq) (*LoginRsp, error)
	mustEmbedUnimplementedLYExaminationServer()
}

// UnimplementedLYExaminationServer must be embedded to have forward compatible implementations.
type UnimplementedLYExaminationServer struct {
}

func (UnimplementedLYExaminationServer) Login(context.Context, *LoginReq) (*LoginRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLYExaminationServer) mustEmbedUnimplementedLYExaminationServer() {}

// UnsafeLYExaminationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LYExaminationServer will
// result in compilation errors.
type UnsafeLYExaminationServer interface {
	mustEmbedUnimplementedLYExaminationServer()
}

func RegisterLYExaminationServer(s grpc.ServiceRegistrar, srv LYExaminationServer) {
	s.RegisterService(&LYExamination_ServiceDesc, srv)
}

func _LYExamination_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LYExaminationServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LYExamination/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LYExaminationServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LYExamination_ServiceDesc is the grpc.ServiceDesc for LYExamination service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LYExamination_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LYExamination",
	HandlerType: (*LYExaminationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _LYExamination_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lyexamination.proto",
}
