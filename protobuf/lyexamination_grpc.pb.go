// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LYExaminationClient is the client API for LYExamination service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LYExaminationClient interface {
	AccountWechatLogin(ctx context.Context, in *WechatLoginReq, opts ...grpc.CallOption) (*WechatLoginRes, error)
	AccountWechatMonitor(ctx context.Context, in *WechatMonitorReq, opts ...grpc.CallOption) (LYExamination_AccountWechatMonitorClient, error)
}

type lYExaminationClient struct {
	cc grpc.ClientConnInterface
}

func NewLYExaminationClient(cc grpc.ClientConnInterface) LYExaminationClient {
	return &lYExaminationClient{cc}
}

func (c *lYExaminationClient) AccountWechatLogin(ctx context.Context, in *WechatLoginReq, opts ...grpc.CallOption) (*WechatLoginRes, error) {
	out := new(WechatLoginRes)
	err := c.cc.Invoke(ctx, "/LYExamination/AccountWechatLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lYExaminationClient) AccountWechatMonitor(ctx context.Context, in *WechatMonitorReq, opts ...grpc.CallOption) (LYExamination_AccountWechatMonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &LYExamination_ServiceDesc.Streams[0], "/LYExamination/AccountWechatMonitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &lYExaminationAccountWechatMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LYExamination_AccountWechatMonitorClient interface {
	Recv() (*WechatMonitorRes, error)
	grpc.ClientStream
}

type lYExaminationAccountWechatMonitorClient struct {
	grpc.ClientStream
}

func (x *lYExaminationAccountWechatMonitorClient) Recv() (*WechatMonitorRes, error) {
	m := new(WechatMonitorRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LYExaminationServer is the server API for LYExamination service.
// All implementations must embed UnimplementedLYExaminationServer
// for forward compatibility
type LYExaminationServer interface {
	AccountWechatLogin(context.Context, *WechatLoginReq) (*WechatLoginRes, error)
	AccountWechatMonitor(*WechatMonitorReq, LYExamination_AccountWechatMonitorServer) error
	mustEmbedUnimplementedLYExaminationServer()
}

// UnimplementedLYExaminationServer must be embedded to have forward compatible implementations.
type UnimplementedLYExaminationServer struct {
}

func (UnimplementedLYExaminationServer) AccountWechatLogin(context.Context, *WechatLoginReq) (*WechatLoginRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountWechatLogin not implemented")
}
func (UnimplementedLYExaminationServer) AccountWechatMonitor(*WechatMonitorReq, LYExamination_AccountWechatMonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method AccountWechatMonitor not implemented")
}
func (UnimplementedLYExaminationServer) mustEmbedUnimplementedLYExaminationServer() {}

// UnsafeLYExaminationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LYExaminationServer will
// result in compilation errors.
type UnsafeLYExaminationServer interface {
	mustEmbedUnimplementedLYExaminationServer()
}

func RegisterLYExaminationServer(s grpc.ServiceRegistrar, srv LYExaminationServer) {
	s.RegisterService(&LYExamination_ServiceDesc, srv)
}

func _LYExamination_AccountWechatLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LYExaminationServer).AccountWechatLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LYExamination/AccountWechatLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LYExaminationServer).AccountWechatLogin(ctx, req.(*WechatLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LYExamination_AccountWechatMonitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WechatMonitorReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LYExaminationServer).AccountWechatMonitor(m, &lYExaminationAccountWechatMonitorServer{stream})
}

type LYExamination_AccountWechatMonitorServer interface {
	Send(*WechatMonitorRes) error
	grpc.ServerStream
}

type lYExaminationAccountWechatMonitorServer struct {
	grpc.ServerStream
}

func (x *lYExaminationAccountWechatMonitorServer) Send(m *WechatMonitorRes) error {
	return x.ServerStream.SendMsg(m)
}

// LYExamination_ServiceDesc is the grpc.ServiceDesc for LYExamination service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LYExamination_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LYExamination",
	HandlerType: (*LYExaminationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccountWechatLogin",
			Handler:    _LYExamination_AccountWechatLogin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AccountWechatMonitor",
			Handler:       _LYExamination_AccountWechatMonitor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "lyexamination.proto",
}
